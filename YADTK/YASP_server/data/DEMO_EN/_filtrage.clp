;; =============================================================================
;; Automatically generated parsing rules (do not modify this file)
;; =============================================================================

(defrule ETAPE2::cree-granule-hello-1 "hello"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "hello" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept hello)
	(bind ?ident (sym-cat [hello]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "hello")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ politeness hello  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-hello-2 "hi"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "hi" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept hello)
	(bind ?ident (sym-cat [hello]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "hi")
	(bind ?metadata (create$ style:informal))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ politeness hello  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-please-3 "please"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "please" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept please)
	(bind ?ident (sym-cat [please]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "please")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ politeness please  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-request-4 "I don' t want"
	(declare (salience 4))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "I" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "don'" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "t" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "want" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "I don' t want")
	(bind ?metadata (create$ mode:neg))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?pos4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-request-5 "I don' t want A1"
	(declare (salience -5))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "I" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "don'" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "t" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "want" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept request) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA1) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata5)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata5)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata5)))))))
	    (and (attente (concept request) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "I don' t want A1")
	(bind ?metadata (create$ mode:neg))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?pos4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id5  ?dep5) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id5) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-request-6 "can I have/obtain"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "can" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "I" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "have/obtain" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "can I have/obtain")
	(bind ?metadata (create$ mode:inter))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-request-7 "can I have/obtain A1"
	(declare (salience -6))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "can" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "I" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "have/obtain" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept request) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA1) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata4)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata4)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata4)))))))
	    (and (attente (concept request) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "can I have/obtain A1")
	(bind ?metadata (create$ mode:inter))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id4  ?dep4) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id4) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-request-8 "I would like"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "I" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "would" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "like" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "I would like")
	(bind ?metadata (create$ level:2))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-request-9 "I would like A1"
	(declare (salience -6))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "I" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "would" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "like" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept request) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA1) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata4)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata4)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata4)))))))
	    (and (attente (concept request) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "I would like A1")
	(bind ?metadata (create$ level:2))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id4  ?dep4) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id4) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-request-10 "I want"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "I" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "want" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "I want")
	(bind ?metadata (create$ level:1))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-request-11 "I want A1"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "I" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "want" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept request) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA1) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata3)))))))
	    (and (attente (concept request) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept request)
	(bind ?ident (sym-cat [request]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "I want A1")
	(bind ?metadata (create$ level:1))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$ speech-act request  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id3) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-ticket-12 "A1 A3 A4"
	(declare (salience -27))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA3) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata2)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata2)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata2)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA3) (tag ?tagA3))))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA4) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata3)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata3)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata3)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 A3 A4")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2 ?id3  ?dep1 ?dep2 ?dep3) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id2) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata2))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id3) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-ticket-13 "A1 ticket(s) A3 A4"
	(declare (salience -26))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket(s)" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata3)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata3)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata3)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA3) (tag ?tagA3))))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata4)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "A1 ticket(s) A3 A4")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3 ?id4  ?dep1 ?dep3 ?dep4) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id3) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata3))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id4) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-ticket-14 "tickets from A3 to A4"
	(declare (salience -15))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "tickets" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "from" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata3)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata3)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata3)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "to" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA4) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata5)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "tickets from A3 to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3 ?pos4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3 ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id3 ?id5  ?dep3 ?dep5) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id3) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata3))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id5) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-ticket-15 "A2 tickets from A3 to A4"
	(declare (salience -24))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "tickets" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "from" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA3) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata4)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes5) (texte ?texte5&:(comp ?texte5 "to" ?lemmes5)) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (score ?score5))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6)  (liste-pos $?liste6) (offres $?offersA4) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata6)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (liste-pos $?liste6) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6)))
	(bind ?pattern "A2 tickets from A3 to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4 ?pos5 ?liste6) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4 ?nbhyp6))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4 ?id6) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4 ?id6  ?dep1 ?dep4 ?dep6) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id4) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata4))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id6) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata6))))) 
)

(defrule ETAPE2::cree-granule-ticket-16 "A1 tickets from A3 to A4"
	(declare (salience -24))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "tickets" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "from" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA3) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata4)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes5) (texte ?texte5&:(comp ?texte5 "to" ?lemmes5)) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (score ?score5))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6)  (liste-pos $?liste6) (offres $?offersA4) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata6)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (liste-pos $?liste6) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6)))
	(bind ?pattern "A1 tickets from A3 to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4 ?pos5 ?liste6) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4 ?nbhyp6))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4 ?id6) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4 ?id6  ?dep1 ?dep4 ?dep6) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id4) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata4))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id6) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata6))))) 
)

(defrule ETAPE2::cree-granule-ticket-17 "A1 A2 tickets from A3 to A4"
	(declare (salience -33))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "tickets" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "from" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA3) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata5)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes6) (texte ?texte6&:(comp ?texte6 "to" ?lemmes6)) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (score ?score6))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id7) (texte ?texte7) (pos ?pos7&:(succ ?pos7 ?fin6)) (fin ?fin7)  (liste-pos $?liste7) (offres $?offersA4) (dependances $?dep7) (metadata $?metadata7) (nbhyp ?nbhyp7) (score ?score7))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata7)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata7)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata7)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id7) (texte ?texte7) (pos ?pos7&:(succ ?pos7 ?fin6)) (fin ?fin7) (liste-pos $?liste7) (dependances $?dep7) (metadata $?metadata7) (nbhyp ?nbhyp7) (score ?score7) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6 ?texte7)))
	(bind ?pattern "A1 A2 tickets from A3 to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?pos3 ?pos4 ?liste5 ?pos6 ?liste7) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2 ?nbhyp5 ?nbhyp7))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2 ?id5 ?id7) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2 ?id5 ?id7  ?dep1 ?dep2 ?dep5 ?dep7) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id5) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata5))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id7) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata7))))) 
)

(defrule ETAPE2::cree-granule-ticket-18 "ticket from A3 to A4"
	(declare (salience -15))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "ticket" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "from" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata3)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata3)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata3)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "to" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA4) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata5)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "ticket from A3 to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3 ?pos4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3 ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id3 ?id5  ?dep3 ?dep5) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id3) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata3))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id5) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-ticket-19 "A2 ticket from A3 to A4"
	(declare (salience -24))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "from" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA3) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata4)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes5) (texte ?texte5&:(comp ?texte5 "to" ?lemmes5)) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (score ?score5))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6)  (liste-pos $?liste6) (offres $?offersA4) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata6)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (liste-pos $?liste6) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6)))
	(bind ?pattern "A2 ticket from A3 to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4 ?pos5 ?liste6) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4 ?nbhyp6))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4 ?id6) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4 ?id6  ?dep1 ?dep4 ?dep6) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id4) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata4))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id6) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata6))))) 
)

(defrule ETAPE2::cree-granule-ticket-20 "A1 ticket from A3 to A4"
	(declare (salience -24))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "from" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA3) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata4)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes5) (texte ?texte5&:(comp ?texte5 "to" ?lemmes5)) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (score ?score5))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6)  (liste-pos $?liste6) (offres $?offersA4) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata6)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (liste-pos $?liste6) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6)))
	(bind ?pattern "A1 ticket from A3 to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4 ?pos5 ?liste6) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4 ?nbhyp6))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4 ?id6) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4 ?id6  ?dep1 ?dep4 ?dep6) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id4) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata4))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id6) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata6))))) 
)

(defrule ETAPE2::cree-granule-ticket-21 "A1 A2 ticket from A3 to A4"
	(declare (salience -33))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "ticket" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "from" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept ticket) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA3) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata5)))))))
	    (and (attente (concept ticket) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA3) (tag ?tagA3))))
	(mot (lemmes $?lemmes6) (texte ?texte6&:(comp ?texte6 "to" ?lemmes6)) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (score ?score6))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id7) (texte ?texte7) (pos ?pos7&:(succ ?pos7 ?fin6)) (fin ?fin7)  (liste-pos $?liste7) (offres $?offersA4) (dependances $?dep7) (metadata $?metadata7) (nbhyp ?nbhyp7) (score ?score7))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata7)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata7)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata7)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id7) (texte ?texte7) (pos ?pos7&:(succ ?pos7 ?fin6)) (fin ?fin7) (liste-pos $?liste7) (dependances $?dep7) (metadata $?metadata7) (nbhyp ?nbhyp7) (score ?score7) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6 ?texte7)))
	(bind ?pattern "A1 A2 ticket from A3 to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?pos3 ?pos4 ?liste5 ?pos6 ?liste7) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2 ?nbhyp5 ?nbhyp7))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2 ?id5 ?id7) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2 ?id5 ?id7  ?dep1 ?dep2 ?dep5 ?dep7) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id5) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata5))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id7) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata7))))) 
)

(defrule ETAPE2::cree-granule-ticket-22 "tickets to A4"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "tickets" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "to" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA4) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata3)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata3)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata3)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "tickets to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id3) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-ticket-23 "A2 tickets to A4"
	(declare (salience -16))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "tickets" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "to" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata4)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "A2 tickets to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4  ?dep1 ?dep4) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id4) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-ticket-24 "A1 tickets to A4"
	(declare (salience -16))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "tickets" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "to" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata4)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "A1 tickets to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4  ?dep1 ?dep4) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id4) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-ticket-25 "A1 A2 tickets to A4"
	(declare (salience -25))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "tickets" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "to" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA4) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata5)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "A1 A2 tickets to A4")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?pos3 ?pos4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2 ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2 ?id5  ?dep1 ?dep2 ?dep5) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id5) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-ticket-26 "ticket to A4"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "ticket" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "to" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA4) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata3)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata3)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata3)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "ticket to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id3) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-ticket-27 "A2 ticket to A4"
	(declare (salience -16))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "to" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata4)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "A2 ticket to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4  ?dep1 ?dep4) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id4) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-ticket-28 "A1 ticket to A4"
	(declare (salience -16))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "to" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata4)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata4)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "A1 ticket to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id4  ?dep1 ?dep4) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id4) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-ticket-29 "A1 A2 ticket to A4"
	(declare (salience -25))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "ticket" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "to" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept ticket) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA4) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata5)))))))
	    (and (attente (concept ticket) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "A1 A2 ticket to A4")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?pos3 ?pos4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2 ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2 ?id5  ?dep1 ?dep2 ?dep5) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id5) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-ticket-30 "tickets"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "tickets" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "tickets")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-ticket-31 "A2 tickets"
	(declare (salience -8))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "tickets" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A2 tickets")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-ticket-32 "A1 tickets"
	(declare (salience -8))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "tickets" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 tickets")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-ticket-33 "A1 A2 tickets"
	(declare (salience -17))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "tickets" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 A2 tickets")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2  ?dep1 ?dep2) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-ticket-34 "ticket"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "ticket" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "ticket")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-ticket-35 "A2 ticket"
	(declare (salience -8))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A2 ticket")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-ticket-36 "A1 ticket"
	(declare (salience -8))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "ticket" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 ticket")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-ticket-37 "A1 A2 ticket"
	(declare (salience -17))
	(or (and (attente (concept ticket) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept ticket) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept ticket) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept ticket) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "ticket" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept ticket)
	(bind ?ident (sym-cat [ticket]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 A2 ticket")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2  ?dep1 ?dep2) nil))
	(bind ?offres (create$ object requestable ticket  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-cheque-38 "cheque"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "cheque" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept cheque)
	(bind ?ident (sym-cat [cheque]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "cheque")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object requestable cheque  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-cheque-39 "A1 cheque"
	(declare (salience -8))
	(or (and (attente (concept cheque) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept cheque) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "cheque" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept cheque)
	(bind ?ident (sym-cat [cheque]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 cheque")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ object requestable cheque  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-roundtrip-40 "round trip"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "round" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "trip" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept roundtrip)
	(bind ?ident (sym-cat [roundtrip]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "round trip")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ ticket-property roundtrip  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-paris-41 "paris"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "paris" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept paris)
	(bind ?ident (sym-cat [paris]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "paris")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ city station paris  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-paris-42 "panam"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "panam" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept paris)
	(bind ?ident (sym-cat [paris]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "panam")
	(bind ?metadata (create$ style:slangy))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ city station paris  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-london-43 "london"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "london" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept london)
	(bind ?ident (sym-cat [london]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "london")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ city station london  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-le_mans-44 "le mans"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "le" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "mans" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept le_mans)
	(bind ?ident (sym-cat [le_mans]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "le mans")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ city station le_mans  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:1-45 "a"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:1)
	(bind ?ident (sym-cat [number:1]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "a")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 1  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:1-46 "1"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "1" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:1)
	(bind ?ident (sym-cat [number:1]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "1")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 1  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:1-47 "one"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "one" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:1)
	(bind ?ident (sym-cat [number:1]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "one")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 1  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:2-48 "2"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "2" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:2)
	(bind ?ident (sym-cat [number:2]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 2  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:2-49 "two"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "two" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:2)
	(bind ?ident (sym-cat [number:2]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "two")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 2  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:5-50 "5"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "5" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:5)
	(bind ?ident (sym-cat [number:5]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "5")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 5  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-number:5-51 "five"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "five" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept number:5)
	(bind ?ident (sym-cat [number:5]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "five")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ number 5  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-room-52 "rooms"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "rooms" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept room)
	(bind ?ident (sym-cat [room]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "rooms")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ requestable room  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-room-53 "A1 rooms"
	(declare (salience -8))
	(or (and (attente (concept room) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept room) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "rooms" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept room)
	(bind ?ident (sym-cat [room]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 rooms")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ requestable room  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-room-54 "room"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "room" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept room)
	(bind ?ident (sym-cat [room]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "room")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ requestable room  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-room-55 "A1 room"
	(declare (salience -8))
	(or (and (attente (concept room) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept room) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "room" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept room)
	(bind ?ident (sym-cat [room]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 room")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ requestable room  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-television-56 "a/the television"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a/the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "television" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept television)
	(bind ?ident (sym-cat [television]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "a/the television")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object room-feature television  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-television-57 "a/the TV"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a/the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "TV" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept television)
	(bind ?ident (sym-cat [television]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "a/the TV")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object room-feature television  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-television-58 "a/the TV set"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a/the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "TV" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "set" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept television)
	(bind ?ident (sym-cat [television]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "a/the TV set")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object room-feature television  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-jacuzzi-59 "a/the jacuzzi"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a/the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "jacuzzi" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept jacuzzi)
	(bind ?ident (sym-cat [jacuzzi]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "a/the jacuzzi")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ room-feature jacuzzi  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-addition-60 "A1 and A2"
	(declare (salience -17))
	(or (and (attente (concept addition) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept addition) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "and" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept addition) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept addition) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	(test (intersectp ?offersA1 ?offersA2))
	=>
	(bind ?concept addition)
	(bind ?ident (sym-cat [addition]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 and A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3  ?dep1 ?dep3) nil))
	(bind ?offres (create$ addition  (intersection ?offersA1 ?offersA2)))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-addition-61 "A1 then A2"
	(declare (salience -17))
	(or (and (attente (concept addition) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept addition) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "then" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept addition) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept addition) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	(test (intersectp ?offersA1 ?offersA2))
	=>
	(bind ?concept addition)
	(bind ?ident (sym-cat [addition]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 then A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3  ?dep1 ?dep3) nil))
	(bind ?offres (create$ addition  (intersection ?offersA1 ?offersA2)))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-reference:this-62 "this one"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "this" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "one" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept reference:this)
	(bind ?ident (sym-cat [reference:this]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "this one")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$  reference this  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-reference:this-63 "this A1"
	(declare (salience -8))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "this" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept reference:this) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept reference:this) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept reference:this)
	(bind ?ident (sym-cat [reference:this]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "this A1")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$  reference this  ?offersA1 ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-reference:this-64 "these A1"
	(declare (salience -8))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "these" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept reference:this) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept reference:this) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept reference:this)
	(bind ?ident (sym-cat [reference:this]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "these A1")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$  reference this  ?offersA1 ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-reference:other-65 "the other one"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "other" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "one" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept reference:other)
	(bind ?ident (sym-cat [reference:other]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "the other one")
	(bind ?metadata (create$ morpho:definite morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$  reference other  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-reference:other-66 "the other A1"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "other" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept reference:other) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA1) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata3)))))))
	    (and (attente (concept reference:other) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept reference:other)
	(bind ?ident (sym-cat [reference:other]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "the other A1")
	(bind ?metadata (create$ morpho:definite morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$  reference other  ?offersA1 ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id3) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-reference:other-67 "another A1"
	(declare (salience -8))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "another" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept reference:other) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept reference:other) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept reference:other)
	(bind ?ident (sym-cat [reference:other]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "another A1")
	(bind ?metadata (create$ morpho:indefinite morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$  reference other  ?offersA1 ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-reference:other-68 "something else"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "something" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "else" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept reference:other)
	(bind ?ident (sym-cat [reference:other]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "something else")
	(bind ?metadata (create$ morpho:indefinite morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$  reference other  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-color-69 "color"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "color" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept color)
	(bind ?ident (sym-cat [color]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "color")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ property color  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-table-70 "table"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "table" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept table)
	(bind ?ident (sym-cat [table]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "table")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object table  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-table-71 "the table"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "table" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept table)
	(bind ?ident (sym-cat [table]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "the table")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ object table  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-attribution-72 "the A1 of A2"
	(declare (salience -16))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept attribution) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept attribution) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "of" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept attribution) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA2) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata4)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata4)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata4)))))))
	    (and (attente (concept attribution) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept attribution)
	(bind ?ident (sym-cat [attribution]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "the A1 of A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id2 ?id4  ?dep2 ?dep4) nil))
	(bind ?offres (create$ attribution  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id4) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-definition-73 "A1 is A2"
	(declare (salience -17))
	(or (and (attente (concept definition) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept definition) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "is" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept definition) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept definition) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept definition)
	(bind ?ident (sym-cat [definition]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 is A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3  ?dep1 ?dep3) nil))
	(bind ?offres (create$ definition  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-definition-74 "is A1 A2"
	(declare (salience -17))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "is" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept definition) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept definition) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept definition) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept definition) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept definition)
	(bind ?ident (sym-cat [definition]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "is A1 A2")
	(bind ?metadata (create$ mode:inter))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id2 ?id3  ?dep2 ?dep3) nil))
	(bind ?offres (create$ definition  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-city:avignon-75 "avignon"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "avignon" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept city:avignon)
	(bind ?ident (sym-cat [city:avignon]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "avignon")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ place-constraint city avignon  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-city:marseille-76 "marseille"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "marseille" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept city:marseille)
	(bind ?ident (sym-cat [city:marseille]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "marseille")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ place-constraint city marseille  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-date-77 "A1"
	(declare (salience -9))
	(or (and (attente (concept date) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept date) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "A1")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-date-78 "A2"
	(declare (salience -9))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-date-79 "A2 A3"
	(declare (salience -18))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA2) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata1)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata1)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA2) (tag ?tagA2))))
	(or (and (attente (concept date) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA3) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata2)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata2)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata2)))))))
	    (and (attente (concept date) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA3) (tag ?tagA3))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A2 A3")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?liste2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id2  ?dep1 ?dep2) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id1) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata1))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id2) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-date-80 "the A2 of A3 A4"
	(declare (salience -25))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "of" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept date) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA3) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata4)))))))
	    (and (attente (concept date) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA3) (tag ?tagA3))))
	(or (and (attente (concept date) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA4) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata5)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata5)))))))
	    (and (attente (concept date) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "the A2 of A3 A4")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3 ?liste4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2 ?nbhyp4 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2 ?id4 ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id2 ?id4 ?id5  ?dep2 ?dep4 ?dep5) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id4) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata4))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id5) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-date-81 "A1 the A2 of A3 A4"
	(declare (salience -34))
	(or (and (attente (concept date) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept date) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "the" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "of" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept date) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA3) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata5)))))))
	    (and (attente (concept date) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA3) (tag ?tagA3))))
	(or (and (attente (concept date) (code A4) (role ?roleA4) (mult ?multA4) (expected $?expectedA4) (required $?requiredA4) (rejected $?rejectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6)  (liste-pos $?liste6) (offres $?offersA4) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6))
	         (test (and (or (vide$ ?expectedA4) (correspondance ?expectedA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?requiredA4) (subsetp ?requiredA4 (create$ ?offersA4 ?metadata6)))
	                    (or (vide$ ?rejectedA4) (not (intersectp ?rejectedA4 (create$ ?offersA4 ?metadata6)))))))
	    (and (attente (concept date) (code A4) (tag ?tagA4&~NONE) (role ?roleA4) (expected $?expectedA4))
	         (granule (ident ?id6) (texte ?texte6) (pos ?pos6&:(succ ?pos6 ?fin5)) (fin ?fin6) (liste-pos $?liste6) (dependances $?dep6) (metadata $?metadata6) (nbhyp ?nbhyp6) (score ?score6) (offres $?offersA4) (tag ?tagA4))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5 ?texte6)))
	(bind ?pattern "A1 the A2 of A3 A4")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3 ?pos4 ?liste5 ?liste6) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3 ?nbhyp5 ?nbhyp6))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3 ?id5 ?id6) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3 ?id5 ?id6  ?dep1 ?dep3 ?dep5 ?dep6) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id5) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata5))))) 
	(assert (liaison (code A4) (idpere ?ident) (idfils ?id6) (role ?roleA4) (types (intersection$ ?expectedA4 (create$ ?offersA4 ?metadata6))))) 
)

(defrule ETAPE2::cree-granule-date-82 "the A2 of A3"
	(declare (salience -16))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "of" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept date) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA3) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata4)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata4)))))))
	    (and (attente (concept date) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA3) (tag ?tagA3))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "the A2 of A3")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id2 ?id4  ?dep2 ?dep4) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id4) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-date-83 "A1 the A2 of A3"
	(declare (salience -25))
	(or (and (attente (concept date) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept date) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "the" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "of" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	(or (and (attente (concept date) (code A3) (role ?roleA3) (mult ?multA3) (expected $?expectedA3) (required $?requiredA3) (rejected $?rejectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5)  (liste-pos $?liste5) (offres $?offersA3) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5))
	         (test (and (or (vide$ ?expectedA3) (correspondance ?expectedA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?requiredA3) (subsetp ?requiredA3 (create$ ?offersA3 ?metadata5)))
	                    (or (vide$ ?rejectedA3) (not (intersectp ?rejectedA3 (create$ ?offersA3 ?metadata5)))))))
	    (and (attente (concept date) (code A3) (tag ?tagA3&~NONE) (role ?roleA3) (expected $?expectedA3))
	         (granule (ident ?id5) (texte ?texte5) (pos ?pos5&:(succ ?pos5 ?fin4)) (fin ?fin5) (liste-pos $?liste5) (dependances $?dep5) (metadata $?metadata5) (nbhyp ?nbhyp5) (score ?score5) (offres $?offersA3) (tag ?tagA3))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4 ?texte5)))
	(bind ?pattern "A1 the A2 of A3")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3 ?pos4 ?liste5) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3 ?nbhyp5))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3 ?id5) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3 ?id5  ?dep1 ?dep3 ?dep5) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
	(assert (liaison (code A3) (idpere ?ident) (idfils ?id5) (role ?roleA3) (types (intersection$ ?expectedA3 (create$ ?offersA3 ?metadata5))))) 
)

(defrule ETAPE2::cree-granule-date-84 "the A2"
	(declare (salience -8))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata2)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata2)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "the A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id2) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-date-85 "A1 the A2"
	(declare (salience -17))
	(or (and (attente (concept date) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept date) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "the" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept date) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept date) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept date)
	(bind ?ident (sym-cat [date]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 the A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3  ?dep1 ?dep3) nil))
	(bind ?offres (create$ time-constraint date  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-time-place-86 "A1 in A2"
	(declare (salience -17))
	(or (and (attente (concept time-place) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept time-place) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "in" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept time-place) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept time-place) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept time-place)
	(bind ?ident (sym-cat [time-place]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "A1 in A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1 ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id1 ?id3  ?dep1 ?dep3) nil))
	(bind ?offres (create$ time-constraint place-constraint time-place  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-time-unit:night-87 "night"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "night" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept time-unit:night)
	(bind ?ident (sym-cat [time-unit:night]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "night")
	(bind ?metadata (create$ morpho:sing))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ time-unit night  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-time-unit:night-88 "nights"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "nights" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept time-unit:night)
	(bind ?ident (sym-cat [time-unit:night]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "nights")
	(bind ?metadata (create$ morpho:plu))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ time-unit night  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-date-period-89 "from A1 to A2"
	(declare (salience -16))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "from" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept date-period) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept date-period) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "to" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(or (and (attente (concept date-period) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA2) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata4)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata4)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata4)))))))
	    (and (attente (concept date-period) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept date-period)
	(bind ?ident (sym-cat [date-period]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "from A1 to A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id2 ?id4  ?dep2 ?dep4) nil))
	(bind ?offres (create$ time-constraint date-period  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id4) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-duration:following-90 "the next A1 A2"
	(declare (salience -16))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "next" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept duration:following) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA1) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata3)))))))
	    (and (attente (concept duration:following) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA1) (tag ?tagA1))))
	(or (and (attente (concept duration:following) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4)  (liste-pos $?liste4) (offres $?offersA2) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata4)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata4)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata4)))))))
	    (and (attente (concept duration:following) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id4) (texte ?texte4) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (liste-pos $?liste4) (dependances $?dep4) (metadata $?metadata4) (nbhyp ?nbhyp4) (score ?score4) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept duration:following)
	(bind ?ident (sym-cat [duration:following]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "the next A1 A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3 ?liste4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3 ?nbhyp4))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3 ?id4) nil))
	(bind ?dependances (supprime$ (create$  ?id3 ?id4  ?dep3 ?dep4) nil))
	(bind ?offres (create$ time-constraint duration following  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id3) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata3))))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id4) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata4))))) 
)

(defrule ETAPE2::cree-granule-person-number-91 "A1 person(s)/people"
	(declare (salience -8))
	(or (and (attente (concept person-number) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept person-number) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "person(s)/people" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept person-number)
	(bind ?ident (sym-cat [person-number]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 person(s)/people")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ room-constraint person-number  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-person-number-92 "for A1 person(s)/people"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "for" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept person-number) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept person-number) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "person(s)/people" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept person-number)
	(bind ?ident (sym-cat [person-number]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "for A1 person(s)/people")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$ room-constraint person-number  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-couple-number-93 "A1 couple(s)"
	(declare (salience -8))
	(or (and (attente (concept couple-number) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept couple-number) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "couple(s)" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept couple-number)
	(bind ?ident (sym-cat [couple-number]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 couple(s)")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ room-constraint couple-number  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-couple-number-94 "for A1 couple(s)"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "for" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept couple-number) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept couple-number) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "couple(s)" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept couple-number)
	(bind ?ident (sym-cat [couple-number]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "for A1 couple(s)")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$ room-constraint couple-number  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
)

(defrule ETAPE2::cree-granule-children-number-95 "A1 child+"
	(declare (salience -8))
	(or (and (attente (concept children-number) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (offres $?offersA1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata1)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata1)))))))
	    (and (attente (concept children-number) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id1) (texte ?texte1) (pos ?pos1) (fin ?fin1) (liste-pos $?liste1) (dependances $?dep1) (metadata $?metadata1) (nbhyp ?nbhyp1) (score ?score1) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "child+" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept children-number)
	(bind ?ident (sym-cat [children-number]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "A1 child+")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?liste1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp1))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id1) nil))
	(bind ?dependances (supprime$ (create$  ?id1  ?dep1) nil))
	(bind ?offres (create$ room-constraint children-number  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id1) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata1))))) 
)

(defrule ETAPE2::cree-granule-children-number-96 "for A1 child+"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "for" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(or (and (attente (concept children-number) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2)  (liste-pos $?liste2) (offres $?offersA1) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata2)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata2)))))))
	    (and (attente (concept children-number) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id2) (texte ?texte2) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (liste-pos $?liste2) (dependances $?dep2) (metadata $?metadata2) (nbhyp ?nbhyp2) (score ?score2) (offres $?offersA1) (tag ?tagA1))))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "child+" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept children-number)
	(bind ?ident (sym-cat [children-number]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "for A1 child+")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?liste2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp2))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id2) nil))
	(bind ?dependances (supprime$ (create$  ?id2  ?dep2) nil))
	(bind ?offres (create$ room-constraint children-number  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id2) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata2))))) 
)

;; =============================================================================
;; End of file
