;; =============================================================================
;; Automatically generated parsing rules (do not modify this file)
;; =============================================================================

(defrule ETAPE2::cree-granule-openning-1 "hello/hi"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "hello/hi" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept openning)
	(bind ?ident (sym-cat [openning]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "hello/hi")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ politeness openning  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-relation-2 "relation"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "relation" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept relation)
	(bind ?ident (sym-cat [relation]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "relation")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ relationshipofwords relation  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-color-3 "color/colour"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "color/colour" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept color)
	(bind ?ident (sym-cat [color]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "color/colour")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ property color  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-color-4 "the color/colour"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "color/colour" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept color)
	(bind ?ident (sym-cat [color]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "the color/colour")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ property color  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-distance-5 "distance"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "distance" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept distance)
	(bind ?ident (sym-cat [distance]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "distance")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ property distance  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-distance-6 "the distance"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "distance" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept distance)
	(bind ?ident (sym-cat [distance]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "the distance")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ property distance  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-walking-7 "walk"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "walk" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept walking)
	(bind ?ident (sym-cat [walking]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "walk")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ action walking  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-stopping-8 "stop"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "stop" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept stopping)
	(bind ?ident (sym-cat [stopping]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "stop")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ action stopping  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-asking-9 "what is A1"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "what" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "is" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept asking) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA1) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata3)))))))
	    (and (attente (concept asking) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept asking)
	(bind ?ident (sym-cat [asking]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "what is A1")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$ dialogue asking  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id3) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-asking-10 "what' s A1"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "what'" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "s" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept asking) (code A1) (role ?roleA1) (mult ?multA1) (expected $?expectedA1) (required $?requiredA1) (rejected $?rejectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA1) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA1) (correspondance ?expectedA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?requiredA1) (subsetp ?requiredA1 (create$ ?offersA1 ?metadata3)))
	                    (or (vide$ ?rejectedA1) (not (intersectp ?rejectedA1 (create$ ?offersA1 ?metadata3)))))))
	    (and (attente (concept asking) (code A1) (tag ?tagA1&~NONE) (role ?roleA1) (expected $?expectedA1))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA1) (tag ?tagA1))))
	=>
	(bind ?concept asking)
	(bind ?ident (sym-cat [asking]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "what' s A1")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$ dialogue asking  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A1) (idpere ?ident) (idfils ?id3) (role ?roleA1) (types (intersection$ ?expectedA1 (create$ ?offersA1 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-sit-11 "sit"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "sit" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept sit)
	(bind ?ident (sym-cat [sit]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "sit")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order sit  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-sit-12 "sit down"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "sit" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "down" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept sit)
	(bind ?ident (sym-cat [sit]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "sit down")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order sit  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-stand-13 "stand"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "stand" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept stand)
	(bind ?ident (sym-cat [stand]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "stand")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order stand  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-stand-14 "stand up"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "stand" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "up" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept stand)
	(bind ?ident (sym-cat [stand]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "stand up")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order stand  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-ordering-15 "can you"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "can" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "you" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept ordering)
	(bind ?ident (sym-cat [ordering]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "can you")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ execution ordering  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-ordering-16 "can you A2"
	(declare (salience -7))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "can" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "you" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(or (and (attente (concept ordering) (code A2) (role ?roleA2) (mult ?multA2) (expected $?expectedA2) (required $?requiredA2) (rejected $?rejectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3)  (liste-pos $?liste3) (offres $?offersA2) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3))
	         (test (and (or (vide$ ?expectedA2) (correspondance ?expectedA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?requiredA2) (subsetp ?requiredA2 (create$ ?offersA2 ?metadata3)))
	                    (or (vide$ ?rejectedA2) (not (intersectp ?rejectedA2 (create$ ?offersA2 ?metadata3)))))))
	    (and (attente (concept ordering) (code A2) (tag ?tagA2&~NONE) (role ?roleA2) (expected $?expectedA2))
	         (granule (ident ?id3) (texte ?texte3) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (liste-pos $?liste3) (dependances $?dep3) (metadata $?metadata3) (nbhyp ?nbhyp3) (score ?score3) (offres $?offersA2) (tag ?tagA2))))
	=>
	(bind ?concept ordering)
	(bind ?ident (sym-cat [ordering]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "can you A2")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?liste3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0 ?nbhyp3))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$  ?id3) nil))
	(bind ?dependances (supprime$ (create$  ?id3  ?dep3) nil))
	(bind ?offres (create$ execution ordering  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
	(assert (liaison (code A2) (idpere ?ident) (idfils ?id3) (role ?roleA2) (types (intersection$ ?expectedA2 (create$ ?offersA2 ?metadata3))))) 
)

(defrule ETAPE2::cree-granule-right-17 "right"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "right" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept right)
	(bind ?ident (sym-cat [right]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "right")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction right  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-right-18 "the/your right"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the/your" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "right" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept right)
	(bind ?ident (sym-cat [right]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "the/your right")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction right  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-right-19 "to right"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "to" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "right" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept right)
	(bind ?ident (sym-cat [right]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "to right")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction right  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-right-20 "to the/your right"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "to" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "the/your" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "right" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept right)
	(bind ?ident (sym-cat [right]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "to the/your right")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction right  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-left-21 "left"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "left" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept left)
	(bind ?ident (sym-cat [left]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "left")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction left  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-left-22 "the/your left"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "the/your" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "left" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept left)
	(bind ?ident (sym-cat [left]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "the/your left")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction left  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-left-23 "to left"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "to" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "left" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept left)
	(bind ?ident (sym-cat [left]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "to left")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction left  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-left-24 "to the/your left"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "to" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "the/your" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "left" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept left)
	(bind ?ident (sym-cat [left]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "to the/your left")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ direction left  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-turnleft-25 "turn left"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "turn" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "left" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept turnleft)
	(bind ?ident (sym-cat [turnleft]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "turn left")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order turnleft  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-turnright-26 "turn right"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "turn" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "right" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept turnright)
	(bind ?ident (sym-cat [turnright]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "turn right")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order turnright  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-turnaround-27 "turn around"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "turn" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "around" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept turnaround)
	(bind ?ident (sym-cat [turnaround]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "turn around")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order turnaround  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-moveleft-28 "move/go/come left"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "move/go/come" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "left" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept moveleft)
	(bind ?ident (sym-cat [moveleft]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "move/go/come left")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order moveleft  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-moveright-29 "move/go/come right"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "move/go/come" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "right" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept moveright)
	(bind ?ident (sym-cat [moveright]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "move/go/come right")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order moveright  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-forward-30 "forward"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "forward" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept forward)
	(bind ?ident (sym-cat [forward]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "forward")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order forward  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-forward-31 "move/go/come forward"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "move/go/come" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "forward" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept forward)
	(bind ?ident (sym-cat [forward]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "move/go/come forward")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order forward  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-backward-32 "move/go/come backward/back/backwards"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "move/go/come" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "backward/back/backwards" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept backward)
	(bind ?ident (sym-cat [backward]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "move/go/come backward/back/backwards")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order backward  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-asknumber-33 "number"
	(declare (salience 1))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "number" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	=>
	(bind ?concept asknumber)
	(bind ?ident (sym-cat [asknumber]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1)))
	(bind ?pattern "number")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order asknumber  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-asknumber-34 "number remember"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "number" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "remember" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept asknumber)
	(bind ?ident (sym-cat [asknumber]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "number remember")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order asknumber  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-asknumber-35 "a number"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "number" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept asknumber)
	(bind ?ident (sym-cat [asknumber]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "a number")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order asknumber  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-asknumber-36 "a number remember"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "number" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "remember" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept asknumber)
	(bind ?ident (sym-cat [asknumber]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "a number remember")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order asknumber  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findwall-37 "find/search wall"
	(declare (salience 2))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "wall" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	=>
	(bind ?concept findwall)
	(bind ?ident (sym-cat [findwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2)))
	(bind ?pattern "find/search wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findwall-38 "a find/search wall"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "a" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "find/search" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "wall" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept findwall)
	(bind ?ident (sym-cat [findwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "a find/search wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findfirstwall-39 "find/search first wall"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "first" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "wall" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept findfirstwall)
	(bind ?ident (sym-cat [findfirstwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "find/search first wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findfirstwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findfirstwall-40 "find/search a first wall"
	(declare (salience 4))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "a" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "first" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "wall" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	=>
	(bind ?concept findfirstwall)
	(bind ?ident (sym-cat [findfirstwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "find/search a first wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?pos4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findfirstwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findsecondwall-41 "find/search second wall"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "second" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "wall" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept findsecondwall)
	(bind ?ident (sym-cat [findsecondwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "find/search second wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findsecondwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findsecondwall-42 "find/search a second wall"
	(declare (salience 4))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "a" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "second" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "wall" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	=>
	(bind ?concept findsecondwall)
	(bind ?ident (sym-cat [findsecondwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "find/search a second wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?pos4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findsecondwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findthirdwall-43 "find/search third wall"
	(declare (salience 3))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "third" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "wall" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	=>
	(bind ?concept findthirdwall)
	(bind ?ident (sym-cat [findthirdwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3)))
	(bind ?pattern "find/search third wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findthirdwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

(defrule ETAPE2::cree-granule-findthirdwall-44 "find/search a third wall"
	(declare (salience 4))
	(mot (lemmes $?lemmes1) (texte ?texte1&:(comp ?texte1 "find/search" ?lemmes1)) (pos ?pos1) (fin ?fin1) (score ?score1))
	(mot (lemmes $?lemmes2) (texte ?texte2&:(comp ?texte2 "a" ?lemmes2)) (pos ?pos2&:(succ ?pos2 ?fin1)) (fin ?fin2) (score ?score2))
	(mot (lemmes $?lemmes3) (texte ?texte3&:(comp ?texte3 "third" ?lemmes3)) (pos ?pos3&:(succ ?pos3 ?fin2)) (fin ?fin3) (score ?score3))
	(mot (lemmes $?lemmes4) (texte ?texte4&:(comp ?texte4 "wall" ?lemmes4)) (pos ?pos4&:(succ ?pos4 ?fin3)) (fin ?fin4) (score ?score4))
	=>
	(bind ?concept findthirdwall)
	(bind ?ident (sym-cat [findthirdwall]# (genint*)))
	(bind ?texte (clean (concatene$  ?texte1 ?texte2 ?texte3 ?texte4)))
	(bind ?pattern "find/search a third wall")
	(bind ?metadata (create$ ))
	(bind ?liste-pos (supprime$ (create$  ?pos1 ?pos2 ?pos3 ?pos4) nil))
	(bind ?liste-ins (complement ?liste-pos))
	(bind ?pos (car$ ?liste-pos))
	(bind ?fin (+ 1 (dernier$ ?liste-pos)))
	(bind ?nbhyp (+ 0 0))
	(bind ?nbins (length$ ?liste-ins))
	(bind ?nbmots (length$ ?liste-pos))
	(bind ?score (score ?nbmots ?nbins))
	(bind ?constituants (supprime$ (create$ ) nil))
	(bind ?dependances (supprime$ (create$  ) nil))
	(bind ?offres (create$ order findthirdwall  ))
	(assert (granule (ident ?ident) (concept ?concept) (texte ?texte) (pattern ?pattern) (pos ?pos) (fin ?fin) (nbmots ?nbmots) (nbins ?nbins) (nbhyp ?nbhyp) (liste-pos ?liste-pos) (liste-ins ?liste-ins) (constituants ?constituants) (dependances ?dependances) (score ?score) (offres ?offres) (metadata ?metadata))) 
)

;; =============================================================================
;; End of file
